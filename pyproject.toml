[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-avatar-platform"
version = "0.1.0"
description = "AI-powered avatar platform for content generation and live streaming"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "AI Avatar Platform Team"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    "metagpt>=0.8.0",
    "aiohttp>=3.8.0",
    "pyyaml>=6.0",
    "asyncio-mqtt>=0.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
full = [
    "requests>=2.28.0",
    "websockets>=11.0.0", 
    "redis>=4.5.0",
    "chromadb>=0.4.0",
    "sentence-transformers",
]

[project.urls]
Homepage = "https://github.com/your-org/ai-avatar-platform"
Repository = "https://github.com/your-org/ai-avatar-platform"
Issues = "https://github.com/your-org/ai-avatar-platform/issues"

[project.scripts]
avatar-platform = "main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "agents*", "workflows*", "tools*", "utils*"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "tests/",
    "build/",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "-v",
]
asyncio_mode = "auto"