"""
Test Infrastructure Setup - Full Test with MetaGPT
"""
import asyncio
from pathlib import Path
import tempfile
import yaml
import sys

# Add current directory to path for imports
sys.path.insert(0, '.')

from core.platform_manager import PlatformManager
from core.config_manager import ConfigManager
from core.base_agent import BaseAgent, BaseAction
from utils.logger import setup_logger


class TestAction(BaseAction):
    """Test action implementation"""
    
    async def _execute(self, message: str = "test"):
        return f"Action executed: {message}"


class TestAgent(BaseAgent):
    """Test agent implementation"""
    
    def __init__(self, **kwargs):
        super().__init__(name="TestAgent", profile="Test Agent", **kwargs)
        self.set_actions([TestAction()])
        
    async def _execute_action(self):
        from metagpt.schema import Message
        action = self.rc.todo
        result = await action.run("Hello from test agent")
        return Message(content=result, role=self.profile, cause_by=type(action))


async def test_config_manager():
    """Test configuration manager"""
    print("Testing ConfigManager...")
    
    # Create temporary config file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False) as f:
        test_config = {
            "llm": {
                "api_type": "openai",
                "api_key": "test_key",
                "model": "gpt-4o"
            },
            "avatar": {
                "api_endpoint": "http://localhost:8000/speak",
                "default_language": "Chinese"
            },
            "n8n": {
                "webhook_url": "http://localhost:5678/webhook/match"
            },
            "mcp": {
                "server_url": "http://localhost:8080"
            }
        }
        yaml.dump(test_config, f)
        temp_path = f.name
    
    try:
        # Test config loading
        config_manager = ConfigManager(temp_path)
        config = config_manager.load_config()
        
        assert config["llm"]["api_type"] == "openai"
        assert config["avatar"]["default_language"] == "Chinese"
        assert config["n8n"]["webhook_url"] == "http://localhost:5678/webhook/match"
        assert config["mcp"]["server_url"] == "http://localhost:8080"
        
        # Test config access with dot notation
        api_type = config_manager.get("llm.api_type")
        assert api_type == "openai"
        
        # Test getting specific configs
        llm_config = config_manager.get_llm_config()
        assert llm_config["model"] == "gpt-4o"
        
        avatar_config = config_manager.get_avatar_config()
        assert "emotion_mappings" in avatar_config  # Should have defaults
        
        print("‚úì ConfigManager tests passed")
        return config
        
    finally:
        Path(temp_path).unlink()


async def test_base_agent():
    """Test base agent functionality"""
    print("Testing BaseAgent...")
    
    # Create test agent
    agent = TestAgent()
    await agent.initialize()
    
    # Check status
    status = agent.get_status()
    assert status["name"] == "TestAgent"
    assert status["state"] == "ready"
    
    # Test action execution
    from metagpt.schema import Message
    test_message = Message(content="test message", role="user")
    agent.process_message(test_message)
    
    print("‚úì BaseAgent tests passed")


async def test_platform_manager():
    """Test platform manager initialization"""
    print("Testing PlatformManager...")
    
    # Create minimal config
    config = {
        "llm": {"api_type": "openai", "api_key": "test"},
        "avatar": {"api_endpoint": "http://localhost:8000"},
        "n8n": {"webhook_url": "http://localhost:5678/webhook"},
        "mcp": {"server_url": "http://localhost:8080"}
    }
    
    # Test platform initialization
    platform = PlatformManager(config, mode="avatar")
    
    # Test status before initialization
    status = platform.get_status()
    assert status["mode"] == "avatar"
    assert not status["running"]
    assert not status["components_initialized"]
    
    print("‚úì PlatformManager tests passed")


def test_logger():
    """Test logger setup"""
    print("Testing Logger setup...")
    
    # Test logger creation
    logger = setup_logger("test_logger", debug=True)
    
    # Test logging
    logger.info("Test info message")
    logger.warning("Test warning message") 
    logger.debug("Test debug message")
    
    # Check log file creation
    log_file = Path("logs/test_logger.log")
    if log_file.exists():
        print("‚úì Log file created successfully")
    else:
        print("‚ö† Log file not found")
        
    print("‚úì Logger tests passed")


async def test_directory_structure():
    """Test that all required directories and files exist"""
    print("Testing directory structure...")
    
    required_dirs = [
        "core",
        "workflows", 
        "tools",
        "utils",
        "agents",
        "config"
    ]
    
    required_files = [
        "main.py",
        "core/__init__.py",
        "core/platform_manager.py",
        "core/config_manager.py", 
        "core/base_agent.py",
        "workflows/__init__.py",
        "workflows/n8n_client.py",
        "workflows/workflow_manager.py",
        "workflows/event_dispatcher.py",
        "tools/__init__.py",
        "tools/mcp_client.py",
        "utils/__init__.py",
        "utils/logger.py"
    ]
    
    missing_dirs = []
    missing_files = []
    
    # Check directories
    for dir_name in required_dirs:
        dir_path = Path(dir_name)
        if dir_path.exists() and dir_path.is_dir():
            print(f"‚úì Directory exists: {dir_name}")
        else:
            print(f"‚ùå Directory missing: {dir_name}")
            missing_dirs.append(dir_name)
            
    # Check files
    for file_name in required_files:
        file_path = Path(file_name)
        if file_path.exists() and file_path.is_file():
            print(f"‚úì File exists: {file_name}")
        else:
            print(f"‚ùå File missing: {file_name}")
            missing_files.append(file_name)
            
    print("‚úì Directory structure tests completed")
    return len(missing_dirs) == 0 and len(missing_files) == 0


async def main():
    """Run all infrastructure tests"""
    print("Running Phase 1 Infrastructure Tests (with MetaGPT)...")
    print("=" * 70)
    
    try:
        # Test core components
        config = await test_config_manager()
        await test_base_agent()
        await test_platform_manager()
        test_logger()
        structure_ok = await test_directory_structure()
        
        print("=" * 70)
        print("‚úÖ All infrastructure tests passed!")
        print("\nPhase 1 Infrastructure Setup Complete:")
        print("  ‚úì Base platform structure with MetaGPT framework")
        print("  ‚úì Core Agent base classes and framework patterns")
        print("  ‚úì Configuration management system")
        print("  ‚úì n8n workflow integration foundation")
        print("  ‚úì MCP server integration layer")
        print("  ‚úì Logging system operational")
        
        print("\nüèóÔ∏è Infrastructure Components:")
        print("  ‚Ä¢ PlatformManager: Central orchestration and lifecycle management")
        print("  ‚Ä¢ ConfigManager: Configuration loading, validation, and management")
        print("  ‚Ä¢ BaseAgent/BaseAction: MetaGPT-based agent framework")
        print("  ‚Ä¢ N8nClient: Workflow automation integration")
        print("  ‚Ä¢ McpClient: Model Context Protocol for tool integration")
        print("  ‚Ä¢ EventDispatcher: Event routing and handling")
        print("  ‚Ä¢ Logger: Structured logging with file rotation")
        
        print("\nüì¶ Platform Capabilities:")
        print("  ‚Ä¢ Multi-mode operation (avatar, content, analytics, full)")
        print("  ‚Ä¢ Event-driven architecture with workflow integration")
        print("  ‚Ä¢ Configurable agent teams with MetaGPT")
        print("  ‚Ä¢ External tool integration via MCP protocol")
        print("  ‚Ä¢ Comprehensive logging and monitoring")
        print("  ‚Ä¢ Modular component architecture")
        
        if structure_ok:
            print("\nüöÄ Ready for Phase 2: Avatar Manufacturing Workshop")
            print("Next steps:")
            print("  1. Implement LiveAvatarAgent base class")
            print("  2. Create avatar configuration system")
            print("  3. Build content generation from single phrases")
            print("  4. Implement avatar-to-API communication")
        else:
            print("\n‚ö†Ô∏è  Some files missing - please check directory structure")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
        raise


if __name__ == "__main__":
    asyncio.run(main())